// Generated by CoffeeScript 1.10.0
(function() {
  var analyze, churn, coffee, cyclomaticComplexity, execSync, files, fs, functionLength, glob, gpa, letterGrade, nestedCoffeeScriptPattern, penalties, rawGpa, ref, report, tokenComplexity, tokens, version;

  version = require("../package.json").version;

  execSync = require("child_process").execSync;

  churn = require("./metrics/churn");

  tokenComplexity = require("./metrics/token_complexity");

  cyclomaticComplexity = require("./metrics/cyclomatic_complexity");

  functionLength = require("./metrics/function_length");

  letterGrade = require("./metrics/letter_grade");

  ref = require("./metrics/gpa"), gpa = ref.gpa, rawGpa = ref.rawGpa;

  penalties = require("./penalties");

  coffee = require("coffee-script");

  tokens = coffee.tokens;

  fs = require("fs");

  glob = require("glob");

  nestedCoffeeScriptPattern = function(path) {
    return path + "/**/*\.+(coffee|coffee\.md|litcoffee)";
  };

  files = function(paths) {
    return paths.reduce(function(list, path) {
      var pattern, stats;
      stats = fs.lstatSync(path);
      if (stats.isFile()) {
        list.push(path);
      } else if (stats.isDirectory()) {
        pattern = nestedCoffeeScriptPattern(path);
        list = list.concat(glob.sync(pattern));
      }
      return list;
    }, []);
  };

  analyze = function(filePath) {
    var cComplexity, fLength, file, fileTokens, numericGrade, raw;
    file = fs.readFileSync(filePath, "utf8");
    fileTokens = tokens(file, {
      literate: coffee.helpers.isLiterate(filePath)
    });
    fLength = functionLength(file);
    cComplexity = cyclomaticComplexity(file);
    raw = rawGpa(file, fileTokens);
    numericGrade = gpa(raw, {
      filePenalty: penalties.longFile(fileTokens.length),
      functionPenalty: penalties.longFunction(fLength.average),
      complexityPenalty: penalties.complexFile(cComplexity.total)
    });
    return {
      gpa: numericGrade,
      letterGrade: letterGrade(numericGrade),
      churn: churn(filePath),
      functionLength: fLength,
      cyclomaticComplexity: cComplexity,
      tokenComplexity: tokenComplexity(fileTokens),
      tokenCount: fileTokens.length
    };
  };

  report = function(filePaths, opts) {
    var scores;
    if (opts == null) {
      opts = {};
    }
    scores = files(filePaths).reduce(function(hash, file) {
      hash[file] = analyze(file);
      return hash;
    }, {});
    return JSON.stringify(scores, null, opts.indentSpace);
  };

  exports.clog = {
    report: report,
    VERSION: version
  };

}).call(this);
